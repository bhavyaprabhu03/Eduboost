# -*- coding: utf-8 -*-
"""Rural_Education.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SPdkcp8wlemGCWPXgktO4ljGqJ7woarw

# Description:

The primary objective of this project is to analyze educational data to identify the major sources & trends of educational inequality in rural areas & to propose data-driven solutions that can help bridge the gap. The specific objectives are:

● To collect & analyze educational data from reliable sources.

● To identify the primary factors contributing to educational inequality in rural areas.

● To understand the temporal & spatial trends in educational outcomes.

● To develop predictive models for educational outcomes based on current data.

● To propose actionable solutions & policy recommendations to enhance education in rural areas.

● To assess the potential impact of these solutions on achieving SDG 4.

Dataset url : https://www.kaggle.com/datasets/sowparnikam/india-rural-urban-education/data

# Name of the columns:

state_name

dist_name

area_type

Total

illiterate_males

literate_males

graduate_males

illiterate_females

literate_females

graduate_females

percentage_graduate_males

percentage_graduate_females

# **Step 1 : Data Loading**
"""

import pandas as pd
# Load the dataset
data = pd.read_csv('states_rural.csv')
# Display the first few rows of the dataset
print("Initial Data Inspection:")
print(data.head())
print("\nSummary Statistics:")
print(data.describe())
print("\nData Information:")
print(data.info())

"""# **Step 2 : Data Description**

# 2.1 : Data Cleaning
"""

# Display the initial columns
print("Initial Columns:")
print(data.columns)

# Remove specific columns
columns_to_remove = ['Unnamed: 12', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15']
data = data.drop(columns=columns_to_remove)

# Display the remaining columns
print("\nRemaining Columns:")
print(data.columns)

"""# 2.2 : Data Shape"""

print("\nData Shape:")
print(data.shape)

"""# 2.3 : List types of all columns"""

#List the types of all columns.
data.dtypes

"""# 2.4 : Summary of the dataset"""

# Statistical summary
data.describe()

"""# **Step 3 : Analyzing Correlation Between Different Factors**

# 3.1 : Computing correlation matrix on numeric data
"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Assuming 'data' is your DataFrame
# Select only numeric columns for correlation calculation
numeric_data = data.select_dtypes(include=['number'])

# Compute the correlation matrix on numeric data
correlation_matrix = numeric_data.corr()

"""# 3.2 : Heatmap"""

# Plot the heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

"""# **Step 4 : Visualizing Trends Over Time**

# 4.1 : Assumption
"""

# Assuming the dataset has 'state_name' and 'percent_graduate_males' columns
if 'state_name' in data.columns and 'percent_graduate_males' in data.columns:
    plt.figure(figsize=(50, 14))
    sns.lineplot(x='state_name', y='percent_graduate_males', data=data, marker='o')
    plt.title('Graduate Males Percentage Over Time')
    plt.xlabel('state_name')
    plt.ylabel('Percent Graduate Males')
    plt.grid(True)
    plt.show()
else:
    print("The dataset does not contain 'state_name' and 'percent_graduate_males' columns for time trend analysis.")

"""# 4.2 : Histogram"""

# Histogram of each feature
data.hist(bins=10,figsize=(10,10))
plt.show()

"""# 4.3 : Scatter Plot"""

# Scatter plot matrix

from pandas.plotting import scatter_matrix
scatter_matrix(data, figsize = (20, 20));

"""# **Step 5 : Developing Predictive Models**

# 5.1 : Preparing and splitting the data
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Verify the column names in the DataFrame
print(data.columns)

# Check if the DataFrame is empty
if data.empty:
    print("Error: The DataFrame 'data' is empty. Please load your data properly.")
else:
    # Prepare the data
    X = data[['illiterate_males', 'illiterate_females', 'Total']]
    y = data['percent_graduate_males']

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# 5.2 : Linear Regression Model"""

# Linear Regression Model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)
mse_lr = mean_squared_error(y_test, y_pred_lr)
print(f'Linear Regression Mean Squared Error: {mse_lr}')

"""# 5.3 : Random Forest Model"""

# Random Forest Model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
mse_rf = mean_squared_error(y_test, y_pred_rf)
print(f'Random Forest Mean Squared Error: {mse_rf}')

"""# 5.4 : Predicting the future literacy rates"""

# Predict future literacy rates (example)
future_data = pd.DataFrame({
    'illiterate_males': [5000, 4500],  # Example data
    'illiterate_females': [6000, 5500],  # Example data
    'Total': [150000, 160000]  # Example data
})
future_predictions_lr = lr_model.predict(future_data)
future_predictions_rf = rf_model.predict(future_data)
print(f'Future Percentage Graduate Males Predictions (Linear Regression): {future_predictions_lr}')
print(f'Future Percentage Graduate Males Predictions (Random Forest): {future_predictions_rf}')

"""# **Step 6 : Proposing Actionable Solutions**"""

# Based on the analysis, here are some actionable solutions:
solutions = """
1. Increase educational funding in areas with high illiteracy rates.
2. Implement targeted literacy programs in rural and underdeveloped regions.
3. Promote community involvement in education through local initiatives and awareness campaigns.
4. Use predictive models to allocate resources efficiently, focusing on areas with the greatest need.
5. Collaborate with non-profits and international organizations to bring in additional resources and expertise.
"""

print("Actionable Solutions:")
print(solutions)

"""# **Step 7 :**

# 7.1 : Assessing the Potential Impact
"""

# Assessing potential impact (hypothetical example)
def simulate_impact(current_rate, improvement_rate):
    return current_rate + improvement_rate

# Example: Simulate an improvement in graduate percentage by 2% through targeted programs
current_graduate_rate = data['percent_graduate_males'].mean()
improvement_rate = 1.0  # Hypothetical improvement rate
new_graduate_rate = simulate_impact(current_graduate_rate, improvement_rate)
print(f'Current Average Graduate Percentage (Males): {current_graduate_rate}')
print(f'New Average Graduate Percentage (Males) after 2% Improvement: {new_graduate_rate}')



# Assessing potential impact (hypothetical example)
def simulate_impact2(current_rate1, improvement_rate1):
    return current_rate1 + improvement_rate1

# Example: Simulate an improvement in graduate percentage by 2% through targeted programs
current_graduate_rate1 = data['percent_graduate_females'].mean()
improvement_rate1 = 1.0  # Hypothetical improvement rate
new_graduate_rate1 = simulate_impact(current_graduate_rate1, improvement_rate1)
print(f'Current Average Graduate Percentage (Females): {current_graduate_rate1}')
print(f'New Average Graduate Percentage (Females) after 2% Improvement: {new_graduate_rate1}')

"""# 7.2 : Visualizing the potential impact"""

# Visualizing the potential impact
plt.figure(figsize=(10, 6))
plt.bar(['Current', 'Improved'], [current_graduate_rate, new_graduate_rate], color=['blue', 'green'])
plt.title('Potential Impact of Proposed Solutions')
plt.ylabel('Graduate Percentage (Males)')
plt.show()

# Visualizing the potential impact
plt.figure(figsize=(10, 6))
plt.bar(['Current', 'Improved'], [current_graduate_rate1, new_graduate_rate1], color=['blue', 'green'])
plt.title('Potential Impact of Proposed Solutions')
plt.ylabel('Graduate Percentage (Females)')
plt.show()